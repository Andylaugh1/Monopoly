// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monopoly.NewDb;

namespace Monopoly.Migrations
{
    [DbContext(typeof(MonopolyDB))]
    partial class MonopolyDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Monopoly.Board", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("BoardId");

                    b.ToTable("Board");
                });

            modelBuilder.Entity("Monopoly.MiddleCard", b =>
                {
                    b.Property<int>("MiddleCardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Instruction");

                    b.Property<string>("Name");

                    b.HasKey("MiddleCardId");

                    b.ToTable("MiddleCards");
                });

            modelBuilder.Entity("Monopoly.Piece", b =>
                {
                    b.Property<int>("PieceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("PieceId");

                    b.ToTable("Pieces");
                });

            modelBuilder.Entity("Monopoly.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsBanker");

                    b.Property<bool>("IsBankrupt");

                    b.Property<string>("Name");

                    b.Property<int?>("PieceId");

                    b.Property<int?>("SpaceId");

                    b.HasKey("PlayerId");

                    b.HasIndex("PieceId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Monopoly.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("StreetSpaceId");

                    b.Property<int>("Type");

                    b.HasKey("PropertyId");

                    b.HasIndex("StreetSpaceId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Monopoly.Space", b =>
                {
                    b.Property<int>("SpaceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BoardId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("SpaceId");

                    b.HasIndex("BoardId");

                    b.ToTable("Spaces");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Space");
                });

            modelBuilder.Entity("Monopoly.NonBuyableSpace", b =>
                {
                    b.HasBaseType("Monopoly.Space");

                    b.Property<string>("Name");

                    b.Property<int>("SpaceType");

                    b.HasDiscriminator().HasValue("NonBuyableSpace");
                });

            modelBuilder.Entity("Monopoly.RailwayStation", b =>
                {
                    b.HasBaseType("Monopoly.Space");

                    b.Property<string>("Name")
                        .HasColumnName("RailwayStation_Name");

                    b.Property<int>("Price");

                    b.Property<int>("ReMortgageValue");

                    b.Property<int>("RentIfAlone");

                    b.Property<int>("RentIfSet");

                    b.HasDiscriminator().HasValue("RailwayStation");
                });

            modelBuilder.Entity("Monopoly.Street", b =>
                {
                    b.HasBaseType("Monopoly.Space");

                    b.Property<int>("Colour");

                    b.Property<int>("HotelPrice");

                    b.Property<int>("HousePrice");

                    b.Property<string>("Name")
                        .HasColumnName("Street_Name");

                    b.Property<int>("Price")
                        .HasColumnName("Street_Price");

                    b.Property<int>("ReMortgageValue")
                        .HasColumnName("Street_ReMortgageValue");

                    b.Property<int>("RentIfAlone")
                        .HasColumnName("Street_RentIfAlone");

                    b.Property<int>("RentIfSet")
                        .HasColumnName("Street_RentIfSet");

                    b.HasDiscriminator().HasValue("Street");
                });

            modelBuilder.Entity("Monopoly.Player", b =>
                {
                    b.HasOne("Monopoly.Piece", "Piece")
                        .WithMany()
                        .HasForeignKey("PieceId");

                    b.HasOne("Monopoly.Space")
                        .WithMany("PlayersCurrentlyOnSpace")
                        .HasForeignKey("SpaceId");
                });

            modelBuilder.Entity("Monopoly.Property", b =>
                {
                    b.HasOne("Monopoly.Street")
                        .WithMany("Properties")
                        .HasForeignKey("StreetSpaceId");
                });

            modelBuilder.Entity("Monopoly.Space", b =>
                {
                    b.HasOne("Monopoly.Board")
                        .WithMany("Spaces")
                        .HasForeignKey("BoardId");
                });
#pragma warning restore 612, 618
        }
    }
}
